{"version":3,"file":"static/js/722.e6566cbc.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/FilterForm/FilterForm.module.css?6686","components/FilterForm/FilterForm.tsx","webpack://my-app/./src/components/Pagination/RenderPaginationDots.module.css?6d41","components/Pagination/RenderPaginationDots.tsx","webpack://my-app/./src/components/AllCustomers/AllCustomersTable.module.css?1718","components/AllCustomers/AllCustomersTable.tsx","pages/CustomersDataPage.tsx","webpack://my-app/./src/pages/ContainerStyles.module.css?0f70"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"FilterForm_wrap__dKOTC\",\"inputWrap\":\"FilterForm_inputWrap__7OFkS\",\"icon\":\"FilterForm_icon__23iPD\",\"input\":\"FilterForm_input__NJviq\",\"errormessage\":\"FilterForm_errormessage__ntEtl\",\"button\":\"FilterForm_button__2yayb\"};","import css from \"./FilterForm.module.css\";\n\nimport { useForm } from \"react-hook-form\";\n\nimport Icon from \"../Icon\";\nimport { FC } from \"react\";\n\ninterface IForms {\n  name: string;\n}\n\ninterface IProps {\n  setSearchQuery: (value: string) => void;\n  placeholder: string;\n}\n\nconst FilterForm: FC<IProps> = ({ setSearchQuery, placeholder }) => {\n  const { register, handleSubmit } = useForm<IForms>();\n\n  const onSubmit = (data: IForms) => {\n    setSearchQuery(data.name);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className={css.wrap}>\n        <input\n          {...register(\"name\")}\n          className={css.input}\n          placeholder={placeholder}\n        />\n\n        <button type=\"submit\" className={css.button}>\n          <div className={css.icon}>\n            <Icon name=\"filter\" width={14} height={14} />\n          </div>\n          Filter\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default FilterForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"RenderPaginationDots_pagination__HG7kX\",\"dot\":\"RenderPaginationDots_dot__MjI2h\",\"activeDot\":\"RenderPaginationDots_activeDot__xOgyA\"};","import { FC } from \"react\";\nimport css from \"./RenderPaginationDots.module.css\";\n\ninterface IProps {\n  currentPage: number;\n  total: number;\n  handlePageChange: (value: number) => void;\n}\n\nconst RenderPaginationDots: FC<IProps> = ({\n  currentPage,\n  total,\n  handlePageChange,\n}) => {\n  const totalPages = Math.ceil(total / 5);\n\n  const dots = [];\n  const maxDots = 5;\n  const middleRange = Math.floor(maxDots / 2);\n\n  let start = Math.max(1, currentPage - middleRange);\n  let end = Math.min(totalPages, currentPage + middleRange);\n\n  if (currentPage <= middleRange) {\n    end = Math.min(totalPages, maxDots);\n  } else if (currentPage > totalPages - middleRange) {\n    start = Math.max(1, totalPages - maxDots + 1);\n  }\n\n  for (let page = start; page <= end; page++) {\n    dots.push(\n      <button\n        key={page}\n        onClick={() => handlePageChange(page)}\n        className={`${css.dot} ${currentPage === page ? css.activeDot : \"\"}`}\n      />\n    );\n  }\n\n  if (start > 1) {\n    dots.unshift(<span key=\"startEllipsis\">...</span>);\n    dots.unshift(\n      <button\n        key={1}\n        onClick={() => handlePageChange(1)}\n        className={`${css.dot} ${currentPage === 1 ? css.activeDot : \"\"}`}\n      />\n    );\n  }\n\n  if (end < totalPages) {\n    dots.push(<span key=\"endEllipsis\">...</span>);\n    dots.push(\n      <button\n        key={totalPages}\n        onClick={() => handlePageChange(totalPages)}\n        className={`${css.dot} ${\n          currentPage === totalPages ? css.activeDot : \"\"\n        }`}\n      />\n    );\n  }\n\n  return <div className={css.pagination}>{dots}</div>;\n};\n\nexport default RenderPaginationDots;\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"AllCustomersTable_table__PSBKH\",\"header\":\"AllCustomersTable_header__maKLA\",\"subheader\":\"AllCustomersTable_subheader__h0Dd7\",\"row\":\"AllCustomersTable_row__Ir6db\",\"cellWrap\":\"AllCustomersTable_cellWrap__6UH-R\",\"avatar\":\"AllCustomersTable_avatar__JQDfn\",\"noResults\":\"AllCustomersTable_noResults__OZ4yU\",\"col-name\":\"AllCustomersTable_col-name__y+yg7\",\"col-email\":\"AllCustomersTable_col-email__2w+TJ\",\"col-address\":\"AllCustomersTable_col-address__L0PN9\",\"col-phone\":\"AllCustomersTable_col-phone__oOE1D\",\"col-date\":\"AllCustomersTable_col-date__rSJpv\"};","import {\n  getCoreRowModel,\n  ColumnDef,\n  flexRender,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport css from \"./AllCustomersTable.module.css\";\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCustomers } from \"../../redux/admin/selectors\";\n\nexport interface Person {\n  avatar: string | undefined;\n  name: string;\n  email: string;\n  address: string;\n  phone: string;\n  date: string;\n}\n\nconst AllCustomersTable = ({ searchQuery }: { searchQuery: string }) => {\n  const customers = useSelector(selectCustomers);\n\n  const columns: ColumnDef<Person>[] = [\n    {\n      header: \"Customers Data\",\n      footer: (props) => props.column.id,\n      columns: [\n        {\n          accessorKey: \"name\",\n          header: \"Name\",\n          cell: ({ row }) => (\n            <div className={css.cellWrap}>\n              <img\n                src={row.original.avatar}\n                alt={row.original.name}\n                className={css.avatar}\n              />\n              {row.original.name}\n            </div>\n          ),\n          footer: (props) => props.column.id,\n        },\n        {\n          accessorKey: \"email\",\n          header: \"Email\",\n          footer: (props) => props.column.id,\n        },\n        {\n          accessorKey: \"address\",\n          header: \"Address\",\n          footer: (props) => props.column.id,\n        },\n        {\n          accessorKey: \"phone\",\n          header: \"Phone\",\n          footer: (props) => props.column.id,\n        },\n        {\n          accessorKey: \"date\",\n          header: \"Register date\",\n          footer: (props) => props.column.id,\n        },\n      ],\n    },\n  ];\n\n  const data = useMemo(\n    () =>\n      customers.map((customer) => {\n        return {\n          avatar: customer.image || customer.photo,\n          name: customer.name,\n          email: customer.email,\n          address: customer.address,\n          phone: customer.phone,\n          date: customer.register_date,\n        };\n      }),\n    [customers]\n  );\n\n  const table = useReactTable({\n    data,\n    columns,\n    enableColumnResizing: true,\n    columnResizeMode: \"onChange\",\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  return (\n    <>\n      <table className={css.table}>\n        <thead>\n          {table.getHeaderGroups().map((headerGroup, index) => (\n            <tr\n              key={headerGroup.id}\n              className={index === 0 ? css.header : css.subheader}\n            >\n              {headerGroup.headers.map((header) => (\n                <th\n                  key={header.id}\n                  colSpan={header.colSpan}\n                  className={index === 0 ? css.header : css.subheader}\n                  style={{ width: header.getSize() }}\n                >\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                        header.column.columnDef.header,\n                        header.getContext()\n                      )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {table.getRowModel().rows.map((row) => {\n            return (\n              <tr key={row.id}>\n                {row.getVisibleCells().map((cell) => {\n                  return (\n                    <td\n                      key={cell.id}\n                      className={`${css.row} ${\n                        cell.column.id === \"name\"\n                          ? css[\"col-name\"]\n                          : cell.column.id === \"email\"\n                          ? css[\"col-email\"]\n                          : cell.column.id === \"address\"\n                          ? css[\"col-address\"]\n                          : cell.column.id === \"phone\"\n                          ? css[\"col-phone\"]\n                          : cell.column.id === \"date\"\n                          ? css[\"col-date\"]\n                          : \"\"\n                      }`}\n                      style={{ width: cell.column.getSize() }}\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {data.length === 0 && (\n        <div className={css.noResults}>\n          No results found for your search query.\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AllCustomersTable;\n","import React, { useEffect, useState } from \"react\";\nimport css from \"./ContainerStyles.module.css\";\nimport FilterForm from \"../components/FilterForm/FilterForm\";\nimport AllCustomersTable from \"../components/AllCustomers/AllCustomersTable\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../redux/store\";\nimport {\n  selectCurrentPage,\n  selectTotalCustomers,\n} from \"../redux/admin/selectors\";\nimport { fetchCustomers } from \"../redux/admin/operation\";\nimport RenderPaginationDots from \"../components/Pagination/RenderPaginationDots\";\nimport { setCurrentPage } from \"../redux/admin/adminSlice\";\n\ninterface IParams {\n  page: number;\n  limit: number;\n  name?: string;\n}\n\nconst CustomersDataPage = () => {\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  const dispatch = useDispatch() as AppDispatch;\n  const currentPage = useSelector(selectCurrentPage);\n\n  const totalCustomers = useSelector(selectTotalCustomers);\n\n  const handlePageChange = (newPage: number) => {\n    dispatch(setCurrentPage(newPage));\n  };\n\n  useEffect(() => {\n    const params: IParams = {\n      page: currentPage,\n      limit: 5,\n      ...(searchQuery && { name: searchQuery }),\n    };\n\n    dispatch(fetchCustomers(params));\n  }, [currentPage, dispatch, searchQuery]);\n\n  useEffect(() => {\n    dispatch(setCurrentPage(1));\n  }, [searchQuery, dispatch]);\n\n  return (\n    <section className={css.container}>\n      <FilterForm setSearchQuery={setSearchQuery} placeholder=\"User name\" />\n      <AllCustomersTable searchQuery={searchQuery} />\n      <RenderPaginationDots\n        currentPage={currentPage}\n        total={totalCustomers}\n        handlePageChange={handlePageChange}\n      />\n    </section>\n  );\n};\n\nexport default CustomersDataPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContainerStyles_container__c-Ay4\",\"wrap\":\"ContainerStyles_wrap__Zujzm\"};"],"names":["_ref","setSearchQuery","placeholder","register","handleSubmit","useForm","_jsx","onSubmit","data","name","children","_jsxs","className","css","type","Icon","width","height","currentPage","total","handlePageChange","totalPages","Math","ceil","dots","middleRange","floor","maxDots","start","max","end","min","page","push","onClick","concat","unshift","searchQuery","customers","useSelector","selectCustomers","columns","header","footer","props","column","id","accessorKey","cell","_ref2","row","src","original","avatar","alt","useMemo","map","customer","image","photo","email","address","phone","date","register_date","table","useReactTable","enableColumnResizing","columnResizeMode","getCoreRowModel","_Fragment","getHeaderGroups","headerGroup","index","headers","colSpan","style","getSize","isPlaceholder","flexRender","columnDef","getContext","getRowModel","rows","getVisibleCells","length","CustomersDataPage","useState","dispatch","useDispatch","selectCurrentPage","totalCustomers","selectTotalCustomers","useEffect","params","limit","fetchCustomers","setCurrentPage","container","FilterForm","AllCustomersTable","RenderPaginationDots","newPage"],"sourceRoot":""}