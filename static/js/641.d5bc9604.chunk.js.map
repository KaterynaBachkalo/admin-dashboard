{"version":3,"file":"static/js/641.d5bc9604.chunk.js","mappings":"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","sources":["webpack://my-app/./src/pages/DashboardPage/DashboardPage.module.css?b183","webpack://my-app/./src/components/Dashboard/Statistics/Statistics.module.css?fa30","components/Dashboard/Statistics/Statistics.tsx","webpack://my-app/./src/components/Dashboard/RecentCustomers/RecentCustomers.module.css?a692","components/Dashboard/RecentCustomers/RecentCustomers.tsx","webpack://my-app/./src/components/Dashboard/IncomeExpenses/IncomeExpenses.module.css?392c","components/Dashboard/IncomeExpenses/IncomeExpenses.tsx","pages/DashboardPage/DashboardPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DashboardPage_container__cx3UH\",\"tables\":\"DashboardPage_tables__AX9Yo\"};","// extracted by mini-css-extract-plugin\nexport default {\"cells\":\"Statistics_cells__Zt+h6\",\"border\":\"Statistics_border__ZN9hW\",\"wrapText\":\"Statistics_wrapText__7Eyz7\",\"text\":\"Statistics_text__2FcsI\",\"number\":\"Statistics_number__O18Jn\"};","import { useSelector } from \"react-redux\";\nimport Icon from \"../../Icon\";\nimport css from \"./Statistics.module.css\";\nimport {\n  selectTotalProducts,\n  selectTotalSuppliers,\n  selectTotalCustomers,\n} from \"../../../redux/admin/selectors\";\n\nconst Statistics = () => {\n  const totalProducts = useSelector(selectTotalProducts);\n  const totalSuppliers = useSelector(selectTotalSuppliers);\n  const totalCustomers = useSelector(selectTotalCustomers);\n\n  return (\n    <div className={css.cells}>\n      <div className={css.border}>\n        <div className={css.wrapText}>\n          <Icon name=\"coins\" />\n          <p className={css.text}>All products</p>\n        </div>\n        <p className={css.number}>{totalProducts}</p>\n      </div>\n\n      <div className={css.border}>\n        <div className={css.wrapText}>\n          <Icon name=\"customers\" />\n          <p className={css.text}>All suppliers</p>\n        </div>\n        <p className={css.number}>{totalSuppliers}</p>\n      </div>\n\n      <div className={css.border}>\n        <div className={css.wrapText}>\n          <Icon name=\"customers\" />\n          <p className={css.text}>All customers</p>\n        </div>\n        <p className={css.number}>{totalCustomers}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Statistics;\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"RecentCustomers_table__xZpnM\",\"header\":\"RecentCustomers_header__CL-SH\",\"subheader\":\"RecentCustomers_subheader__VIjJy\",\"row\":\"RecentCustomers_row__N8Umx\",\"cellWrap\":\"RecentCustomers_cellWrap__LSejU\",\"avatar\":\"RecentCustomers_avatar__40m05\",\"col-name\":\"RecentCustomers_col-name__f17X0\",\"col-email\":\"RecentCustomers_col-email__p86CW\",\"col-spent\":\"RecentCustomers_col-spent__ZizsT\"};","import {\n  getCoreRowModel,\n  ColumnDef,\n  flexRender,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport css from \"./RecentCustomers.module.css\";\n\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectCustomers,\n  selectIsLoading,\n} from \"../../../redux/admin/selectors\";\nimport Loader from \"../../Loader/Loader\";\n\ninterface Person {\n  name: string;\n  email: string;\n  spent: string;\n  avatar: string | undefined;\n}\n\nconst columns: ColumnDef<Person>[] = [\n  {\n    header: \"Recent Customers\",\n    footer: (props) => props.column.id,\n    columns: [\n      {\n        accessorKey: \"name\",\n        header: \"Name\",\n        cell: ({ row }) => (\n          <div className={css.cellWrap}>\n            <img\n              src={row.original.avatar}\n              alt={row.original.name}\n              className={css.avatar}\n            />\n            <p className={css.name}>{row.original.name}</p>\n          </div>\n        ),\n        footer: (props) => props.column.id,\n      },\n      {\n        accessorKey: \"email\",\n        header: \"Email\",\n        footer: (props) => props.column.id,\n      },\n      {\n        accessorKey: \"spent\",\n        header: \"Spent\",\n        footer: (props) => props.column.id,\n      },\n    ],\n  },\n];\n\nconst RecentCustomersTable = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  const customers = useSelector(selectCustomers);\n\n  const myCustomers = customers\n    .map((customer) => {\n      return {\n        avatar: customer.image || customer.photo,\n        name: customer.name,\n        email: customer.email,\n        spent: customer.spent,\n      };\n    })\n    .slice(-5);\n\n  const data = useMemo(() => myCustomers, [myCustomers]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    enableColumnResizing: true,\n    columnResizeMode: \"onChange\",\n    getCoreRowModel: getCoreRowModel(),\n    debugTable: false,\n    debugHeaders: false,\n    debugColumns: false,\n  });\n\n  return (\n    <>\n      <table className={css.table}>\n        <thead>\n          {table.getHeaderGroups().map((headerGroup, index) => (\n            <tr\n              key={headerGroup.id}\n              className={index === 0 ? css.header : css.subheader}\n            >\n              {headerGroup.headers.map((header) => (\n                <th\n                  key={header.id}\n                  colSpan={header.colSpan}\n                  className={index === 0 ? css.header : css.subheader}\n                >\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                        header.column.columnDef.header,\n                        header.getContext()\n                      )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {table.getRowModel().rows.map((row) => {\n            return (\n              <tr key={row.id}>\n                {row.getVisibleCells().map((cell) => {\n                  const cellValue = cell.getValue() as string;\n                  return (\n                    <td\n                      key={cell.id}\n                      title={cellValue}\n                      className={`${css.row} ${\n                        cell.column.id === \"name\"\n                          ? css[\"col-name\"]\n                          : cell.column.id === \"email\"\n                          ? css[\"col-email\"]\n                          : cell.column.id === \"spent\"\n                          ? css[\"col-spent\"]\n                          : \"\"\n                      }`}\n                      style={{ width: cell.column.getSize() }}\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {isLoading && data.length === 0 && <Loader />}\n    </>\n  );\n};\n\nexport default RecentCustomersTable;\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"IncomeExpenses_table__8KaYT\",\"header\":\"IncomeExpenses_header__GX2wp\",\"subheader\":\"IncomeExpenses_subheader__0p4dg\",\"row\":\"IncomeExpenses_row__S-o6w\",\"cellWrap\":\"IncomeExpenses_cellWrap__vAwW8\",\"avatar\":\"IncomeExpenses_avatar__NkkjL\",\"expense\":\"IncomeExpenses_expense__m8kcp\",\"income\":\"IncomeExpenses_income__1wuMn\",\"error\":\"IncomeExpenses_error__Qw1TQ\",\"col3Red\":\"IncomeExpenses_col3Red__DX8ZZ\",\"col3Green\":\"IncomeExpenses_col3Green__t6UYX\",\"col3Error\":\"IncomeExpenses_col3Error__KX61c\"};","import {\n  getCoreRowModel,\n  ColumnDef,\n  flexRender,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport css from \"./IncomeExpenses.module.css\";\n\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectIncomeExpenses,\n  selectIsLoading,\n} from \"../../../redux/admin/selectors\";\nimport Loader from \"../../Loader/Loader\";\n\ninterface Person {\n  type: string;\n  name: string;\n  amount: string;\n}\n\nconst columns: ColumnDef<Person>[] = [\n  {\n    header: \"Income/Expenses\",\n    footer: (props) => props.column.id,\n    columns: [\n      {\n        accessorKey: \"type\",\n        header: \"Today\",\n        footer: (props) => props.column.id,\n      },\n      {\n        accessorKey: \"name\",\n        header: \"\",\n        footer: (props) => props.column.id,\n      },\n      {\n        accessorKey: \"amount\",\n        header: \"\",\n        footer: (props) => props.column.id,\n      },\n    ],\n  },\n];\n\nconst IncomeExpenses = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  const incomes = useSelector(selectIncomeExpenses);\n\n  const data = useMemo(() => incomes.slice(-6), [incomes]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    enableColumnResizing: true,\n    columnResizeMode: \"onChange\",\n    getCoreRowModel: getCoreRowModel(),\n    debugTable: false,\n    debugHeaders: false,\n    debugColumns: false,\n  });\n\n  const getClassByType = (type: string) => {\n    if (type === \"Expense\") return css.expense;\n    if (type === \"Income\") return css.income;\n    return css.error;\n  };\n\n  const getClassByAmount = (type: string) => {\n    if (type === \"Expense\") return css.col3Red;\n    if (type === \"Income\") return css.col3Green;\n    return css.col3Error;\n  };\n\n  return (\n    <>\n      <table className={css.table}>\n        <thead>\n          {table.getHeaderGroups().map((headerGroup, index) => (\n            <tr\n              key={headerGroup.id}\n              className={index === 0 ? css.header : css.subheader}\n            >\n              {headerGroup.headers.map((header) => (\n                <th\n                  key={header.id}\n                  colSpan={header.colSpan}\n                  className={index === 0 ? css.header : css.subheader}\n                  style={{ width: header.getSize() }}\n                >\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                        header.column.columnDef.header,\n                        header.getContext()\n                      )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {table.getRowModel().rows.map((row) => {\n            return (\n              <tr key={row.id}>\n                {row.getVisibleCells().map((cell) => {\n                  return (\n                    <td\n                      key={cell.id}\n                      className={css.row}\n                      style={{ width: cell.column.getSize() }}\n                    >\n                      {cell.column.id === \"type\" ? (\n                        <span className={getClassByType(row.original.type)}>\n                          {row.original.type}\n                        </span>\n                      ) : cell.column.id === \"amount\" ? (\n                        <span className={getClassByAmount(row.original.type)}>\n                          {row.original.amount}\n                        </span>\n                      ) : (\n                        flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )\n                      )}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {isLoading && data.length === 0 && <Loader />}\n    </>\n  );\n};\n\nexport default IncomeExpenses;\n","import css from \"./DashboardPage.module.css\";\nimport Statistics from \"../../components/Dashboard/Statistics/Statistics\";\nimport RecentCustomers from \"../../components/Dashboard/RecentCustomers/RecentCustomers\";\nimport IncomeExpenses from \"../../components/Dashboard/IncomeExpenses/IncomeExpenses\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../redux/store\";\nimport { fetchData } from \"../../redux/admin/operation\";\n\nconst DasboardPage = () => {\n  const dispatch = useDispatch() as AppDispatch;\n\n  useEffect(() => {\n    let isMounted = true;\n\n    (async () => {\n      if (isMounted) {\n        dispatch(fetchData());\n      }\n    })();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [dispatch]);\n\n  return (\n    <section className={css.container}>\n      <Statistics />\n      <div className={css.tables}>\n        <RecentCustomers />\n        <IncomeExpenses />\n      </div>\n    </section>\n  );\n};\n\nexport default DasboardPage;\n"],"names":["Statistics","totalProducts","useSelector","selectTotalProducts","totalSuppliers","selectTotalSuppliers","totalCustomers","selectTotalCustomers","_jsxs","className","css","children","_jsx","Icon","name","columns","header","footer","props","column","id","accessorKey","cell","_ref","row","cellWrap","src","original","avatar","alt","RecentCustomersTable","isLoading","selectIsLoading","myCustomers","selectCustomers","map","customer","image","photo","email","spent","slice","data","useMemo","table","useReactTable","enableColumnResizing","columnResizeMode","getCoreRowModel","debugTable","debugHeaders","debugColumns","_Fragment","getHeaderGroups","headerGroup","index","subheader","headers","colSpan","isPlaceholder","flexRender","columnDef","getContext","getRowModel","rows","getVisibleCells","cellValue","getValue","title","concat","style","width","getSize","length","Loader","IncomeExpenses","incomes","selectIncomeExpenses","getClassByAmount","type","amount","DasboardPage","dispatch","useDispatch","useEffect","isMounted","fetchData","RecentCustomers"],"sourceRoot":""}